['the']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['of']	"# 1. We create a variable i and set it to 0.
# 2. We enter a while loop that will run as long as i is less than the length of nums.
# 3. We create a variable j and set it to the value of nums at index i.
# 4. We enter an if statement that checks if the value of nums at index i is less than the length of nums and also checks if the value of nums at index i is not equal to the value of nums at index j.
# 5. If the above condition is true, we swap the values of nums at index i and nums at index j.
# 6. Else, we increment i by 1.
# 7. We then loop back to the second step.
# 8. If the condition in the second step never holds true, we return the length of nums.
# 
# 
# Explanation of what the code does in natural"
['to']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['and']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['a']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['in']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['is']	"# 2. i = 0, j = 0, nums[i] = 0, nums[j] = 0, nums[i] = nums[j] = 0
# 3. i = 1, j = 1, nums[i] = 1, nums[j] = 1, nums[i] = nums[j] = 1
# 4. i = 2, j = 2, nums[i] = 2, nums[j] = 2, nums[i] = nums[j] = 2
# 5. i = 3, j = 0, nums[i] = 3, nums[j] = 0, nums[i] = nums[j] = 0
# 6. i = 4, j = 4, nums[i] = 4, nums[j] = 4, nums[i] = nums[j] = 4
# 7"
['it']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['you']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['that']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['he']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['was']	"2.
# 3.
# 4.
# 5.
# 6.
# 7.
# 8.
# 9.
# 10.
# 11.
# 12.
# 13.
# 14.
# 15.
# 16.
# 17.
# 18.
# 19.
# 20.
# 21.
# 22.
# 23.
# 24.
# 25.
# 26.
# 27.
# 28.
# 29.
# 30.
# 31.
# 32.
# 33.
# 34.
# 35.
# 36.
# 37.
# 38.
# 39.
# 40.
# 41.
# 42.
# 43.
# 44.
# 45.
# 46.
# 47.
# 48.
# 49.
# 50.
# 51.
# 52.
# 53.
# 54"
['for']	"# 1. We start with a for loop that iterates through the list of numbers.
# 2. We set a variable j to the value of the index of the current number.
# 3. We check if the current number is less than the length of the list of numbers and if the current number is not equal to the value of the index of the current number.
# 4. If the current number is less than the length of the list of numbers and if the current number is not equal to the value of the index of the current number, we swap the current number with the value of the index of the current number.
# 5. If the current number is not less than the length of the list of numbers, we increment i by 1.
# 6. We return the value of the index of the current number.
# 
# The code is O(n) time and O(1) space.
# 
# The time complexity is O(n) because we"
['on']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['are']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['with']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['as']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['I']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['his']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['they']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['be']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['at']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['one']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['have']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['this']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['from']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['or']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['had']	"2. Then it shows the code and the result.
# 3. Then it explains the code line by line.
# 4. Then it explains the code in a natural language.
# 5. Then it explains the code in a natural language.
# 6. Then it explains the code in a natural language.
# 7. Then it explains the code in a natural language.
# 8. Then it explains the code in a natural language.
# 9. Then it explains the code in a natural language.
# 10. Then it explains the code in a natural language.
# 11. Then it explains the code in a natural language.
# 12. Then it explains the code in a natural language.
# 13. Then it explains the code in a natural language.
# 14. Then it explains the code in a natural language.
# 15. Then it explains the code in a natural language.
# 16. Then it explains the code in a natural language.
# 17"
['by']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['not']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['word']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['but']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['what']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['some']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['we']	"# 2. We start with i = 0 and while i < len(nums)
# 3. We swap the value of nums[i] with nums[nums[i]] if nums[i] < len(nums) and nums[i] != nums[nums[i]]
# 4. We increment i by 1
# 5. If we reach the end of the loop, we return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['can']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['out']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['other']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['were']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['all']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['there']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['when']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['up']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['use']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['your']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['how']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['said']	"2.
# 3.
# 4.
# 5.
# 6.
# 7.
# 8.
# 9.
# 10.
# 11.
# 12.
# 13.
# 14.
# 15.
# 16.
# 17.
# 18.
# 19.
# 20.
# 21.
# 22.
# 23.
# 24.
# 25.
# 26.
# 27.
# 28.
# 29.
# 30.
# 31.
# 32.
# 33.
# 34.
# 35.
# 36.
# 37.
# 38.
# 39.
# 40.
# 41.
# 42.
# 43.
# 44.
# 45.
# 46.
# 47.
# 48.
# 49.
# 50.
# 51.
# 52.
# 53.
# 54"
['an']	"# 1. We start with a for loop that iterates through the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a while loop that will run as long as i is less than the length of the list of numbers.
# 4. We set a variable j to the value of the index of the current number in the list of numbers.
# 5. We set a conditional statement that will check if the value of the index of the current number in the list of numbers is less than the length of the list of numbers and if the value of the current number in the list of numbers is not equal to the value of the index of the current number in the list of numbers.
# 6. If the conditional statement is true, we swap the values of the current number in the list of numbers and the value of the index of the current number in the list of numbers.
# 7. If the conditional statement is false, we increment i by 1"
['each']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['she']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['which']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['do']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['their']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['time']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['if']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['will']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['way']	"# 1. We start with a list of numbers.
# 2. We start with an index of 0.
# 3. We check if the number at the index is equal to the index itself.
# 4. If it is, we increment the index by 1.
# 5. If it is not, we swap the number at the index with the number at the number at the index.
# 6. We repeat steps 3-5 until we reach the end of the list.
# 7. We return the index of the first number that is not equal to the number at the index.
# 
# The code above is O(n) time and O(1) space.
# 
# The code below is O(n) time and O(n) space.
def find_missing_number(nums):
    num_set = set(nums)
    n = len(nums) + 1
    for number in range("
['about']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['many']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['then']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['them']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['write']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['would']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['like']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['so']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['these']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['her']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['long']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['make']	"# 1. We start with a list of numbers.
# 2. We set i to 0.
# 3. We loop through the list of numbers.
# 4. We set j to the value of the index at i.
# 5. We check if the value at index i is not equal to the value at index j.
# 6. If it is not equal, we swap the values at index i and index j.
# 7. If it is equal, we increment i by 1.
# 8. We loop through the list of numbers again.
# 9. We check if the value at index i is not equal to the value at index i.
# 10. If it is not equal, we return i.
# 11. If it is equal, we return the length of the list of numbers.
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['thing']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['see']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['him']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['two']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['has']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['look']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['more']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['day']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['could']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['go']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['come']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['did']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['number']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sound']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['no']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['most']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['people']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['my']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['over']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['know']	"# i = 0
# 
# i = 0
# 
# j = nums[0] = 0
# 
# nums[0] = 0
# 
# nums[0] = 0
# 
# i = 1
# 
# i = 1
# 
# j = nums[1] = 1
# 
# nums[1] = 1
# 
# nums[1] = 1
# 
# i = 2
# 
# i = 2
# 
# j = nums[2] = 2
# 
# nums[2] = 2
# 
# nums[2] = 2
# 
# i = 3
# 
# i = 3
# 
# j = nums[3] = 3
# 
# nums[3] = 3
# 
# nums"
['water']	"# 1. We start with a for loop that iterates over the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a variable j to the value of the number at index i in the list of numbers.
# 4. We check if the number at index i in the list of numbers is not equal to the number at index j in the list of numbers.
# 5. If the number at index i in the list of numbers is not equal to the number at index j in the list of numbers, we swap the two numbers at the two indices.
# 6. If the number at index i in the list of numbers is equal to the number at index j in the list of numbers, we increment i by 1.
# 7. We return the value of the index i.
# 
# The code above will swap the numbers at the two indices if the number at index i in the list of numbers is not equal to the number"
['than']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['call']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['first']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['who']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['may']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['down']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['side']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['been']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['now']	"# i = 0
# 
# i is the index of the array, and we start the index at 0.
# 
# while i < len(nums):
# 
# We are going to loop through the array, and we are going to loop until the index is less than the length of the array.
# 
# j = nums[i]
# 
# We are going to assign the value of the index to a variable.
# 
# if nums[i] < len(nums) and nums[i] != nums[j]:
# 
# We are going to check if the value of the index is less than the length of the array, and if the value of the index is not equal to the value of the variable.
# 
# nums[i], nums[j] = nums[j], nums[i]
# 
# We are going to"
['find']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['any']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['new']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['work']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['part']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['take']	"# i = 0
# 
# i = 0
# 
# j = nums[0] = 0
# 
# nums[0] = 0
# 
# nums[0] = 0
# 
# i = 1
# 
# i = 1
# 
# j = nums[1] = 1
# 
# nums[1] = 1
# 
# nums[1] = 1
# 
# i = 2
# 
# i = 2
# 
# j = nums[2] = 2
# 
# nums[2] = 2
# 
# nums[2] = 2
# 
# i = 3
# 
# i = 3
# 
# j = nums[3] = 3
# 
# nums[3] = 3
# 
# nums"
['get']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['place']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['made']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['live']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['where']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['after']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['back']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['little']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['only']	"# 1. We start with a for loop that iterates over the list of numbers.
# 2. We set a variable j to the value of the index of the current number.
# 3. We check if the current number is less than the length of the list of numbers and if the current number is not equal to the value of the index of the current number.
# 4. If the current number is less than the length of the list of numbers and if the current number is not equal to the value of the index of the current number, we swap the current number with the value of the index of the current number.
# 5. If the current number is not less than the length of the list of numbers, we increment i by 1.
# 6. We return the value of the index of the current number.
# 
# The time complexity of the above algorithm is O(n).
# 
# The space complexity of the above algorithm is O(1)."
['round']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['man']	"# i = 0
# 
# i is the index of the array, and we start from the first element of the array.
# 
# while i < len(nums):
# 
# We check if the index is less than the length of the array.
# 
# j = nums[i]
# 
# We assign the value of the index to j.
# 
# if nums[i] < len(nums) and nums[i] != nums[j]:
# 
# We check if the value of the index is less than the length of the array and if the value of the index is not equal to the value of the assigned value of the index.
# 
# nums[i], nums[j] = nums[j], nums[i]
# 
# We swap the values of the index and the assigned value of the index.
#"
['year']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['came']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['show']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['every']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['good']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['me']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['give']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['our']	"# 1. We start with a for loop that iterates over the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a while loop that runs as long as i is less than the length of the list of numbers.
# 4. We set a variable j to the value of the index of the current number in the list.
# 5. We check if the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number in the list.
# 6. If the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number in the list, we swap the current number with the value of the index of the current number in the list.
# 7. If the current number is not less than the length of the list of numbers or if it is equal to the value of the index of"
['under']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['name']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['very']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['through']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['just']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['form']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['sentence']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['great']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['think']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['say']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['help']	"# i = 0
# 
# i is the index of the array, and we start it at 0.
# 
# while i < len(nums):
# 
# We loop through the array.
# 
# j = nums[i]
# 
# We set j to the value of the index i.
# 
# if nums[i] < len(nums) and nums[i] != nums[j]:
# 
# We check if the value of the index i is less than the length of the array and if the value of the index i is not equal to the value of the index j.
# 
# nums[i], nums[j] = nums[j], nums[i]
# 
# We swap the values of the indexes i and j.
# 
# else:
# 
# i += 1
#"
['low']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['line']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['differ']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['turn']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cause']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[0]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[0]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[0]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[0]
# 19. i = 6
# 20"
['much']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mean']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['before']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['move']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['right']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['boy']	"# i = 0
# 
# i is the index of the array
# 
# while i < len(nums):
# 
# while i is less than the length of the array
# 
# j = nums[i]
# 
# j is the value of the array at index i
# 
# if nums[i] < len(nums) and nums[i] != nums[j]:
# 
# if the value of the array at index i is less than the length of the array and the value of the array at index i is not equal to the value of the array at index j
# 
# nums[i], nums[j] = nums[j], nums[i]
# 
# swap the values of the array at index i and index j
# 
# else:
# 
# else
# 
# i += 1"
['old']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['too']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['same']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tell']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['does']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['set']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['three']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['want']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['air']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['well']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['also']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['play']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['small']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['end']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['put']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['home']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['read']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hand']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['port']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['large']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['spell']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['add']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['even']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['land']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['here']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['must']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['big']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['high']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['such']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['follow']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['act']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['why']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ask']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['men']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['change']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['went']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['light']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['kind']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['off']	"# 1. We start with a for loop that iterates through the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a variable j to the value of the number at index i.
# 4. We check if the number at index i is less than the length of the list and if the number at index i is not equal to the number at index j.
# 5. If the number at index i is less than the length of the list and if the number at index i is not equal to the number at index j, we swap the number at index i and the number at index j.
# 6. If the number at index i is not less than the length of the list, we increment i by 1.
# 7. We return the value of i.
# 
# The code above will swap the number at index i with the number at index j if the number at index i is less than the length of the list"
['need']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['house']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['picture']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['try']	"# i = 0
# 
# j = nums[0] = 0
# 
# nums[0] = 0, nums[0] = 0
# 
# i = 1
# 
# j = nums[1] = 1
# 
# nums[0] = 0, nums[1] = 1
# 
# i = 2
# 
# j = nums[2] = 2
# 
# nums[0] = 0, nums[2] = 2
# 
# i = 3
# 
# j = nums[3] = 3
# 
# nums[0] = 0, nums[3] = 3
# 
# i = 4
# 
# j = nums[4] = 4
# 
# nums[0] = 0, nums[4] = 4"
['us']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['again']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['animal']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['point']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mother']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['world']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['near']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['build']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['self']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['earth']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['father']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['head']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stand']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['own']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['page']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['should']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['country']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['found']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['answer']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['school']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['grow']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['study']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['still']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['learn']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['plant']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cover']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['food']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sun']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['four']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['between']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['state']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['keep']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['eye']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['never']	"2.
# 3.
# 4.
# 5.
# 6.
# 7.
# 8.
# 9.
# 10.
# 11.
# 12.
# 13.
# 14.
# 15.
# 16.
# 17.
# 18.
# 19.
# 20.
# 21.
# 22.
# 23.
# 24.
# 25.
# 26.
# 27.
# 28.
# 29.
# 30.
# 31.
# 32.
# 33.
# 34.
# 35.
# 36.
# 37.
# 38.
# 39.
# 40.
# 41.
# 42.
# 43.
# 44.
# 45.
# 46.
# 47.
# 48.
# 49.
# 50.
# 51.
# 52.
# 53.
# 54"
['last']	"# 1. We start with a for loop that iterates over the list of numbers.
# 2. We set a variable i to 0.
# 3. Then we set a while loop that runs as long as i is less than the length of the list of numbers.
# 4. Inside the while loop, we set a variable j to the value of the index of the current number.
# 5. We check if the current number is less than the length of the list of numbers and if the current number is not equal to the value of the index of the current number.
# 6. If the current number is less than the length of the list of numbers and if the current number is not equal to the value of the index of the current number, we swap the current number with the value of the index of the current number.
# 7. Otherwise, we increment i by 1.
# 8. After the while loop finishes, we return the value of the index of the current number"
['let']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['thought']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[0]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[0]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[0]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[0]
# 19. i = 6
# 20"
['city']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tree']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['cross']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['farm']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['hard']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['start']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['might']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['story']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['saw']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['far']	"# 1. We start with a for loop that iterates over the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a variable j to the value of the number at index i in the list of numbers.
# 4. We check if the number at index i in the list of numbers is not equal to the number at index j in the list of numbers.
# 5. If the number at index i in the list of numbers is not equal to the number at index j in the list of numbers, we swap the two numbers at the two indices.
# 6. If the number at index i in the list of numbers is equal to the number at index j in the list of numbers, we increment i by 1.
# 7. We return the value of the index i.
# 
# The code above is a little convoluted and confusing. We can simplify it by using a while loop instead of a for loop.
#"
['sea']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['draw']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['left']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['late']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['run']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
"[""don't""]"	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['while']	"# 1. We start with i = 0 and while i < len(nums)
# 2. We then set j = nums[i] and if nums[i] < len(nums) and nums[i] != nums[j]
# 3. We then swap nums[i] and nums[j]
# 4. Else we increment i by 1
# 5. We then loop through the array and if i != nums[i] we return i
# 6. If we loop through the entire array and haven't returned anything, we return len(nums)
# 
# The time complexity of this algorithm is O(n) and the space complexity is O(1).

# Solution 2: Hash Set
# 
# We can also use a hash set to keep track of the numbers we have seen so far.
# 
# 1. We create a set to keep track of the numbers we have"
['press']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['close']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['night']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['real']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['life']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['few']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['north']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['open']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['seem']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['together']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['next']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['white']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['children']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['begin']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['got']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['walk']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['example']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = 1
# 4. nums[1] = 2
# 5. nums[2] = 3
# 6. nums[3] = 4
# 7. nums[4] = 5
# 8. nums[5] = 6
# 9. nums[6] = 7
# 10. nums[7] = 8
# 11. nums[8] = 9
# 12. nums[9] = 10
# 13. nums[10] = 11
# 14. nums[11] = 12
# 15. nums[12] = 13
# 16. nums[13] = 14
# 17. nums[14] = 15
# 18. nums[15] = 16
# 19. nums[16] = 17
# 20"
['ease']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['paper']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['group']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['always']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['music']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['those']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['both']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mark']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['often']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['letter']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['until']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mile']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['river']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['car']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['feet']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['care']	"# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
# 
# i = 0
#"
['second']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['book']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['carry']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['took']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['science']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['eat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['room']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['friend']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['began']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['idea']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['fish']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['mountain']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stop']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['once']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['base']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['hear']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['horse']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cut']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sure']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['watch']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['color']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['face']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wood']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['main']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['enough']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['plain']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['girl']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['usual']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['young']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['ready']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['above']	"# 1. We start with a list of numbers.
# 2. We set i to 0 and start a while loop.
# 3. We set j to the value of nums[i].
# 4. We check if nums[i] is less than the length of nums and if nums[i] is not equal to nums[j].
# 5. If the above condition is true, we swap the values of nums[i] and nums[j].
# 6. Else, we increment i by 1.
# 7. We loop through the list of numbers and return the index of the first number that doesn't match its index.
# 8. If we loop through the entire list and all the numbers match their index, we return the length of the list.
# 
# The time complexity of the above algorithm is O(n).
# 
# The space complexity of the above algorithm is O(1).

#"
['ever']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['red']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['list']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['though']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['feel']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['talk']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bird']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['soon']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['body']	"# 1. We have a list of numbers.
# 2. We iterate through the list of numbers.
# 3. We take the number at the current index and assign it to a variable j.
# 4. We check if the number at the current index is less than the length of the list of numbers and if the number at the current index is not equal to the number at the index of the number that we got from the previous step.
# 5. If the number at the current index is less than the length of the list of numbers and if the number at the current index is not equal to the number at the index of the number that we got from the previous step, we swap the number at the current index with the number at the index of the number that we got from the previous step.
# 6. If the number at the current index is not equal to the number at the index of the number that we got from the previous step, we increment the index by 1."
['dog']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['family']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['direct']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pose']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['leave']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['song']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['measure']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['door']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['product']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['black']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['short']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['numeral']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['class']	"# 1. We start with a for loop that iterates over the input list of numbers.
# 2. For each number n, we switch it with the number at index n in the list.
# 3. If n is already at the correct index, we move on to the next number.
# 4. When we're done, we check the last index to see if it's correct.
# 5. If it's not, we return that index.
# 6. If it is, we return the length of the list.
# 
# The code above has a bug. What is it?
# 
# The bug is that the code will never find the correct index for the last number in the list. This is because the code switches the last number with the number at the last index, but the last index is not necessarily correct.
# 
# To fix this, we can add an extra check to see if the last index is correct.
#"
['wind']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['question']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['happen']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['complete']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ship']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['area']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['half']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['rock']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['order']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fire']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['south']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['problem']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['piece']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['told']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['knew']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pass']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['since']	"# 1. i = 0, j = 0, nums[i] = 0, nums[j] = 0, nums[i] = nums[j] = 0
# 2. i = 1, j = 1, nums[i] = 1, nums[j] = 0, nums[i] = nums[j] = 0
# 3. i = 2, j = 2, nums[i] = 2, nums[j] = 0, nums[i] = nums[j] = 0
# 4. i = 3, j = 3, nums[i] = 3, nums[j] = 0, nums[i] = nums[j] = 0
# 5. i = 4, j = 4, nums[i] = 4, nums[j] = 0, nums[i] = nums[j] = 0
# 6"
['top']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['whole']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['king']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['space']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['heard']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['best']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['hour']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['better']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['true']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['during']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hundred']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['five']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['remember']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['step']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['early']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hold']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['west']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ground']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['interest']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['reach']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fast']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['verb']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sing']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['listen']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['six']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['table']	"# | i | j | nums |
# |---|---|------|
# | 0 | 0 | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] |
# | 1 | 1 | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] |
# | 2 | 2 | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] |
# | 3 | 3 | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] |
# | 4 | 4 | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] |
# | 5 | 5 | [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] |
# | 6 | 6 | [0, 1, 2, 3"
['travel']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['less']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['morning']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ten']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['simple']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['several']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['vowel']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['toward']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['war']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['lay']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['against']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pattern']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['slow']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['center']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['love']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['person']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['money']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['serve']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['appear']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['road']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['map']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['rain']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['rule']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['govern']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pull']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cold']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['notice']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['voice']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['unit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['power']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['town']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['fine']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['certain']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['fly']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fall']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['lead']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cry']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['dark']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['machine']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['note']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['wait']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['plan']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['figure']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['star']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['box']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['noun']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['field']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['rest']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['correct']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['able']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pound']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['done']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['beauty']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['drive']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stood']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['contain']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['front']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['teach']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['week']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['final']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['gave']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['green']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['oh']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['quick']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['develop']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ocean']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['warm']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['free']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['minute']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['strong']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['special']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mind']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['behind']	"# 1. We start with a for loop that iterates through the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a while loop that will run as long as i is less than the length of the list of numbers.
# 4. We set a variable j to the value of the index of the current number in the list of numbers.
# 5. We check if the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number in the list of numbers.
# 6. If the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number in the list of numbers, we swap the current number with the value of the index of the current number in the list of numbers.
# 7. If the current number is not less than the length of the list of numbers or if it"
['clear']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['tail']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['produce']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['fact']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['street']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['inch']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['multiply']	"# 1. i = 0, j = 0, nums[i] = 0, nums[j] = 0, nums[i] = nums[j] = 0
# 2. i = 1, j = 1, nums[i] = 1, nums[j] = 1, nums[i] = nums[j] = 1
# 3. i = 2, j = 2, nums[i] = 2, nums[j] = 2, nums[i] = nums[j] = 2
# 4. i = 3, j = 3, nums[i] = 3, nums[j] = 3, nums[i] = nums[j] = 3
# 5. i = 4, j = 4, nums[i] = 4, nums[j] = 4, nums[i] = nums[j] = 4
# 6"
['nothing']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['course']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stay']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wheel']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['full']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['force']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['blue']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['object']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['decide']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['surface']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['deep']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['moon']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['island']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['foot']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['system']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['busy']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['test']	"# 1. i = 0, nums = [1,2,0]
# 2. j = nums[0] = 1, nums = [1,2,0]
# 3. nums[0] = 1, nums[1] = 2, nums[2] = 0, nums = [1,2,0]
# 4. i = 1, nums = [1,2,0]
# 5. j = nums[1] = 2, nums = [1,2,0]
# 6. nums[1] = 2, nums[2] = 0, nums = [1,2,0]
# 7. i = 2, nums = [1,2,0]
# 8. j = nums[2] = 0, nums = [1,2,0]
# 9. nums[2] = 0, nums"
['record']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['boat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['common']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['gold']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['possible']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['plane']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stead']	"# 1. We start with a list of numbers.
# 2. We start with an index of 0.
# 3. We check if the number at the index is equal to the index itself.
# 4. If it is not, we swap the number at the index with the number at the index of the number at the index.
# 5. We then increment the index by 1.
# 6. If the number at the index is equal to the index itself, we increment the index by 1.
# 7. We repeat the process until the index reaches the end of the list.
# 8. We then return the index of the last number.
# 
# The code is O(n) time and O(1) space.
# 
# The code is O(n) time and O(1) space.
# 
# The code is O(n) time and O(1) space.
# 
# The code is"
['dry']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wonder']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['laugh']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['thousand']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ago']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ran']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['check']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['game']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shape']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['equate']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hot']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['miss']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['brought']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['heat']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['snow']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tire']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bring']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['yes']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['distant']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fill']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['east']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['paint']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['language']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['among']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['grand']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ball']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['yet']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['wave']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['drop']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['heart']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['am']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['present']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['heavy']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['dance']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['engine']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['position']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['arm']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wide']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sail']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['material']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['size']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['vary']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['settle']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['speak']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['weight']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['general']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ice']	"# 1. We start with a for loop that iterates through the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a while loop that will run as long as i is less than the length of the list of numbers.
# 4. We set a variable j to the value of the index of the current number in the list of numbers.
# 5. We check if the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number.
# 6. If the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number, we swap the current number with the value of the index of the current number.
# 7. If the current number is not less than the length of the list of numbers or if it is equal to the value of the index of the current number, we increment"
['matter']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['circle']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pair']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['include']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['divide']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['syllable']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['felt']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['perhaps']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['pick']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sudden']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['count']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['square']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['reason']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['length']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['represent']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['art']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['subject']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['region']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['energy']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['hunt']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['probable']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['bed']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['brother']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['egg']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ride']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cell']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['believe']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['fraction']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['forest']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['race']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = 1
# 4. nums[1] = 0
# 5. i = 1
# 6. j = nums[1]
# 7. nums[1] = 1
# 8. nums[2] = 0
# 9. i = 2
# 10. j = nums[2]
# 11. nums[2] = 2
# 12. i = 3
# 13. j = nums[3]
# 14. nums[3] = 3
# 15. i = 4
# 16. j = nums[4]
# 17. nums[4] = 4
# 18. i = 5
# 19. j = nums[5]
# 20. nums[5] = 5
# 21. i = 6
# 22. j"
['window']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['store']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['summer']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['train']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['sleep']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['prove']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['lone']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['leg']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['exercise']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wall']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['catch']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[1]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[2]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[3]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[4]
# 19. i = 6
# 20"
['mount']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wish']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sky']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['board']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['joy']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['winter']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['written']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wild']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['instrument']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['kept']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['glass']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['grass']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cow']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['job']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['edge']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sign']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['visit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['past']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['soft']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fun']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bright']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['gas']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['weather']	"# i = 0
# 
# i is the index of the array.
# 
# while i < len(nums):
# 
# while i is less than the length of the array.
# 
# j = nums[i]
# 
# j is the value of the array at index i.
# 
# if nums[i] < len(nums) and nums[i] != nums[j]:
# 
# if the value of the array at index i is less than the length of the array and the value of the array at index i is not equal to the value of the array at index j.
# 
# nums[i], nums[j] = nums[j], nums[i]
# 
# swap the values of the array at index i and index j.
# 
# else:
# 
# else:
#"
['month']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['million']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bear']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['finish']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['happy']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hope']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['flower']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['clothe']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['strange']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['gone']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['jump']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['baby']	"# i = 0
# 
# i is the index of the array.
# 
# while i < len(nums):
# 
# while i is less than the length of the array.
# 
# j = nums[i]
# 
# j is the value of the array at index i.
# 
# if nums[i] < len(nums) and nums[i] != nums[j]:
# 
# if the value of the array at index i is less than the length of the array and the value of the array at index i is not equal to the value of the array at index j.
# 
# nums[i], nums[j] = nums[j], nums[i]
# 
# swap the values of the array at index i and index j.
# 
# else:
# 
# else:
#"
['eight']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['village']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['meet']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['root']	"# 1. We start with a for loop that iterates over the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a variable j to the value of the number at index i in the list of numbers.
# 4. We check if the number at index i in the list of numbers is less than the length of the list of numbers and if the number at index i in the list of numbers is not equal to the number at index j in the list of numbers.
# 5. If the number at index i in the list of numbers is less than the length of the list of numbers and if the number at index i in the list of numbers is not equal to the number at index j in the list of numbers, we swap the number at index i in the list of numbers and the number at index j in the list of numbers.
# 6. If the number at index i in the list of numbers is not less than the length of the"
['buy']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['raise']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['solve']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['metal']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['whether']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['push']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['seven']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['paragraph']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['third']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shall']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['held']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hair']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['describe']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cook']	"# 1. We start with a list of numbers.
# 2. We set i to 0.
# 3. We iterate through the list of numbers.
# 4. We set j to the value of the index at i.
# 5. We check if the value at i is not equal to the value at j.
# 6. If it is not equal, we swap the values at i and j.
# 7. If it is equal, we increment i by 1.
# 8. We repeat steps 3-7 until i is equal to the length of the list.
# 9. We iterate through the list of numbers again.
# 10. We return the value at the index of i if i is not equal to the value at the index of i.
# 11. If i is equal to the value at the index of i, we return the length of the list.
# 
# 
# 
# 
#"
['floor']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['either']	"# 2. or explain it line by line with the code.
# 
# 3. or add some comments within the code itself.
# 
# 4. or all of the above

# **Question 2**
# 
# Write a function that takes a list of numbers and returns the cumulative sum; that is, a new list where the ith element is the sum of the first i+1 elements from the original list. For example, the cumulative sum of [1, 2, 3] is [1, 3, 6].
# 
# ```
# def cumulative_sum(nums):
# pass
# 
# cumulative_sum([1, 2, 3])
# [1, 3, 6]
# ```
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['result']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[0]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[0]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[0]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[0]
# 19. i = 6
# 20"
['burn']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hill']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['safe']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['century']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['consider']	# 1. i = 0, j = 0, nums[0] = 0, nums[0] = 0, i = 0, j = 0, nums[0] = 0, i = 1, j = 1, nums[1] = 1, nums[1] = 1, i = 1, j = 1, nums[1] = 1, i = 2, j = 2, nums[2] = 2, i = 2, j = 2, nums[2] = 2, i = 3, j = 3, nums[3] = 3, i = 3, j = 3, nums[3] = 3, i = 4, j = 4, nums[4] = 4, i = 4, j = 4, nums[4] = 4, i = 5, j = 5, nums[5] = 5, i = 5, j = 5, nums[5
['type']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['law']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['bit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['coast']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['copy']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['phrase']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['silent']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tall']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sand']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['soil']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['roll']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['temperature']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['finger']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['industry']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['value']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fight']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['lie']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['beat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['excite']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['natural']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['view']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sense']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ear']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['else']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['quite']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['broke']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['case']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = 1
# 4. nums[1] = 2
# 5. nums[2] = 3
# 6. nums[3] = 4
# 7. nums[4] = 5
# 8. nums[5] = 6
# 9. nums[6] = 7
# 10. nums[7] = 8
# 11. nums[8] = 9
# 12. nums[9] = 10
# 13. i = 1
# 14. j = nums[1]
# 15. nums[1] = 2
# 16. nums[2] = 3
# 17. nums[3] = 4
# 18. nums[4] = 5
# 19. nums[5] = 6
# 20. nums["
['middle']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['kill']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['son']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['lake']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['moment']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['scale']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['loud']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['spring']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['observe']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[1]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[2]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[3]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[4]
# 19. i = 6
# 20"
['child']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['straight']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['consonant']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['nation']	"# 1. We start with a for loop that iterates through the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a while loop that will run as long as i is less than the length of the list of numbers.
# 4. We set a variable j to the value of the index of the current number in the list of numbers.
# 5. We check if the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number.
# 6. If the current number is less than the length of the list of numbers and if it is not equal to the value of the index of the current number, we swap the current number with the value of the index of the current number.
# 7. If the current number is not less than the length of the list of numbers or if it is equal to the value of the index of the current number, we increment"
['dictionary']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['milk']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['speed']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['method']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['organ']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pay']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['age']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['section']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['dress']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cloud']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['surprise']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['quiet']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stone']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tiny']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['climb']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cool']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['design']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['poor']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['lot']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['experiment']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[1]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[2]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[3]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[4]
# 19. i = 6
# 20"
['bottom']	"# 1. We start with a loop that goes through the list of numbers.
# 2. We set a variable j to the value of the index of the current number.
# 3. We check if the current number is not at the correct index.
# 4. If it is not, we swap the current number with the number at the correct index.
# 5. If it is, we increment i.
# 6. We loop through the list again and return the index of the first number that is not at the correct index.
# 
# The code is O(n) time and O(1) space.
# 
# Explanation bottom what the code does in natural language one by one 2.
# 
# 1. We start with a loop that goes through the list of numbers.
# 2. We set a variable j to the value of the index of the current number.
# 3. We check if the current number is not at the"
['key']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['iron']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['single']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stick']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['flat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['twenty']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['skin']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['smile']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['crease']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hole']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['trade']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['melody']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['trip']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['office']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['receive']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['row']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mouth']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['exact']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['symbol']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['die']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['least']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['trouble']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['shout']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['except']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wrote']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['seed']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tone']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['join']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['suggest']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['clean']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['break']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['lady']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['yard']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['rise']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bad']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['blow']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['oil']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['blood']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['touch']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['grew']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cent']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mix']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['team']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wire']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cost']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['lost']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['brown']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wear']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['garden']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['equal']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sent']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['choose']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fell']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['flow']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fair']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bank']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['collect']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['save']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['control']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['decimal']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['gentle']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['woman']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['captain']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['practice']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['separate']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['difficult']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['doctor']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['please']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['protect']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['noon']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['whose']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['locate']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['ring']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['character']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['insect']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['caught']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['period']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['indicate']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['radio']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['spoke']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['atom']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['human']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['history']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['effect']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['electric']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['expect']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['crop']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['modern']	"# 1. We start with a list of numbers.
# 2. We set i to 0.
# 3. We iterate through the list of numbers.
# 4. We set j to the value of the index at i.
# 5. We check if the value at i is less than the length of the list and if the value at i is not equal to the value at j.
# 6. If the above condition is true, we swap the values at i and j.
# 7. Else we increment i by 1.
# 8. We iterate through the list of numbers again.
# 9. We check if the value at i is not equal to the value at the index of i.
# 10. If the above condition is true, we return the value at i.
# 11. Else we return the length of the list.
# 
# 
# 
# 
# 
# 
# 
#"
['element']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['student']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['corner']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['party']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['supply']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bone']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['rail']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['imagine']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['provide']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['agree']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['thus']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['capital']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
"[""won't""]"	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['chair']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['danger']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['fruit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['rich']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['thick']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['soldier']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['process']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['operate']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['guess']	"# i = 0
# 
# i = 0
# j = 0
# nums[0] = 0
# nums[0] = 0
# 
# i = 1
# j = 1
# nums[1] = 1
# nums[1] = 1
# 
# i = 2
# j = 2
# nums[2] = 2
# nums[2] = 2
# 
# i = 3
# j = 0
# nums[3] = 0
# nums[3] = 3
# 
# i = 4
# j = 4
# nums[4] = 4
# nums[4] = 4
# 
# i = 5
# j = 1
# nums[5] = 1
# nums[5] = 5
# 
# i = 6
# j = 2
# nums"
['necessary']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sharp']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wing']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['create']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['neighbor']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['wash']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bat']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['rather']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['crowd']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['corn']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['compare']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['poem']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['string']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bell']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['depend']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['meat']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['rub']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tube']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['famous']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['dollar']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stream']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fear']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['sight']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['thin']	"# 1. We start with a for loop that iterates through the list of numbers.
# 2. We set a variable i to 0.
# 3. We set a variable j to the value of the number at index i in the list of numbers.
# 4. We check if the number at index i in the list of numbers is less than the length of the list of numbers and if the number at index i in the list of numbers is not equal to the number at index j in the list of numbers.
# 5. If the number at index i in the list of numbers is less than the length of the list of numbers and if the number at index i in the list of numbers is not equal to the number at index j in the list of numbers, we swap the number at index i in the list of numbers and the number at index j in the list of numbers.
# 6. If the number at index i in the list of numbers is not less than the length of the"
['triangle']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = 1
# 4. nums[1] = 0
# 5. i = 1
# 6. j = nums[1]
# 7. nums[1] = 1
# 8. nums[2] = 0
# 9. i = 2
# 10. j = nums[2]
# 11. nums[2] = 2
# 12. i = 3
# 13. j = nums[3]
# 14. nums[3] = 3
# 15. i = 4
# 16. j = nums[4]
# 17. nums[4] = 4
# 18. i = 5
# 19. j = nums[5]
# 20. nums[5] = 5
# 21. i = 6
# 22. j"
['planet']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hurry']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['chief']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['colony']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['clock']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mine']	"# i = 0
# 
# i is the index of the array, and we start it at 0.
# 
# while i < len(nums):
# 
# We loop through the array.
# 
# j = nums[i]
# 
# We set j to the value of the index i.
# 
# if nums[i] < len(nums) and nums[i] != nums[j]:
# 
# We check if the value of the index i is less than the length of the array and if the value of the index i is not equal to the value of the index j.
# 
# nums[i], nums[j] = nums[j], nums[i]
# 
# We swap the values of the indexes i and j.
# 
# else:
# 
# i += 1
#"
['tie']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['enter']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['major']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fresh']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['search']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['send']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['yellow']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['gun']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['allow']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['print']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['dead']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['spot']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['desert']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['suit']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['current']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['lift']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['rose']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['continue']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['block']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['chart']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['hat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sell']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['success']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['company']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['subtract']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[0]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[0]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[0]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[0]
# 19. i = 6
# 20"
['event']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['particular']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['deal']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['swim']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['term']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['opposite']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wife']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shoe']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shoulder']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['spread']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['arrange']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['camp']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['invent']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['cotton']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['born']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['determine']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['quart']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['nine']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['truck']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['noise']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['level']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['chance']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['gather']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shop']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['stretch']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['throw']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shine']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['property']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['column']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['molecule']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['select']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['wrong']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = 1
# 4. nums[1] = 0
# 5. nums[0] = 0
# 6. i = 1
# 7. j = nums[1]
# 8. nums[1] = 1
# 9. nums[2] = 0
# 10. nums[1] = 0
# 11. i = 2
# 12. j = nums[2]
# 13. nums[2] = 2
# 14. nums[3] = 0
# 15. nums[2] = 0
# 16. i = 3
# 17. j = nums[3]
# 18. nums[3] = 3
# 19. nums[4] = 0
# 20. nums[3] = 0
# 21."
['gray']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['repeat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['require']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['broad']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['prepare']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['salt']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['nose']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['plural']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['anger']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['claim']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['continent']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['oxygen']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['sugar']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['death']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pretty']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['skill']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['women']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['season']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['solution']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['magnet']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['silver']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['thank']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['branch']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['match']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['suffix']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['especially']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fig']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['afraid']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['huge']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['sister']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['steel']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['discuss']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['forward']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['similar']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['guide']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['experience']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = 1
# 4. nums[1] = 2
# 5. nums[2] = 3
# 6. nums[3] = 4
# 7. nums[4] = 5
# 8. nums[5] = 6
# 9. nums[6] = 7
# 10. nums[7] = 8
# 11. nums[8] = 9
# 12. nums[9] = 0
# 13. i = 1
# 14. j = nums[1]
# 15. nums[1] = 2
# 16. nums[2] = 3
# 17. nums[3] = 4
# 18. nums[4] = 5
# 19. nums[5] = 6
# 20. nums["
['score']	"# 1. We initialize a variable i and set it to 0.
# 2. We loop while i is less than the length of the list.
# 3. We set a variable j to the value of the element at index i in the list.
# 4. We check if the value of the element at index i in the list is less than the length of the list and if the value of the element at index i in the list is not equal to the value of the element at index j in the list.
# 5. If the above condition is true, we swap the values of the element at index i in the list and the element at index j in the list.
# 6. Otherwise, we increment i by 1.
# 7. We loop back to the step 2.
# 8. We loop through the list and return the index of the first element that doesn't match its index.
# 9. If no such element is found, we return the length of the"
['apple']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bought']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['led']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['pitch']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['coat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['mass']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['card']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['band']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['rope']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['slip']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['win']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['dream']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['evening']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['condition']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['feed']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['tool']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['total']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['basic']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['smell']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
['valley']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['nor']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['double']	"# 1. i = 0
# 2. j = nums[0]
# 3. nums[0] = nums[0]
# 4. i = 1
# 5. j = nums[1]
# 6. nums[1] = nums[0]
# 7. i = 2
# 8. j = nums[2]
# 9. nums[2] = nums[0]
# 10. i = 3
# 11. j = nums[3]
# 12. nums[3] = nums[0]
# 13. i = 4
# 14. j = nums[4]
# 15. nums[4] = nums[0]
# 16. i = 5
# 17. j = nums[5]
# 18. nums[5] = nums[0]
# 19. i = 6
# 20"
['seat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['arrive']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['master']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['track']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['parent']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shore']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['division']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['sheet']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['substance']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['favor']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['connect']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['post']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['spend']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['chord']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['fat']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['glad']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['original']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['share']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['station']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['dad']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['bread']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['charge']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['proper']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['bar']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['offer']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['segment']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['slave']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['duck']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['instant']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['market']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['degree']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['populate']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['chick']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['dear']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['enemy']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. num"
['reply']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['drink']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['occur']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['support']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['speech']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['nature']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['range']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['steam']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['motion']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['path']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['liquid']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['log']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['meant']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['quotient']	"# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i], nums[j] = nums[j], nums[i]
# 6. else:
# 7. i += 1
# 8. for i in range(len(nums)):
# 9. if i != nums[i]:
# 10. return i
# 11. return len(nums)
# 
# 1. i = 0
# 2. while i < len(nums):
# 3. j = nums[i]
# 4. if nums[i] < len(nums) and nums[i] != nums[j]:
# 5. nums[i"
['teeth']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['shell']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
['neck']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
[' ']	"# 2.
# 
# 3.
# 
# 4.
# 
# 5.
# 
# 6.
# 
# 7.
# 
# 8.
# 
# 9.
# 
# 10.
# 
# 11.
# 
# 12.
# 
# 13.
# 
# 14.
# 
# 15.
# 
# 16.
# 
# 17.
# 
# 18.
# 
# 19.
# 
# 20.
# 
# 21.
# 
# 22.
# 
# 23.
# 
# 24.
# 
# 25.
# 
# 26.
# 
# 27.
# 
# 28.
# 
# 29.
# 
# 30.
# 
# 31."
